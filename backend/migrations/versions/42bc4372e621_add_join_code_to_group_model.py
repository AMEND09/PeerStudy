"""Add join_code to Group model

Revision ID: 42bc4372e621
Revises: <some_previous_id>
Create Date: ...

"""
from alembic import op
import sqlalchemy as sa
import secrets
import string

# revision identifiers, used by Alembic.
revision = '42bc4372e621'
down_revision = None # This will have your actual previous revision ID
branch_labels = None
depends_on = None

# --- Define the table structure for our data migration ---
group_table = sa.table('group',
    sa.column('id', sa.Integer),
    sa.column('join_code', sa.String)
)

def generate_join_code(length=6):
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def upgrade():
    # ### commands auto generated by Alembic - adjusted by us! ###

    # 1. Add the join_code column, but allow it to be NULL temporarily.
    op.add_column('group', sa.Column('join_code', sa.String(length=8), nullable=True))

    # 2. Get a connection to the database to run UPDATE statements.
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # 3. Find all existing groups and give each one a unique join code.
    groups_to_update = session.query(group_table).filter(group_table.c.join_code == None).all()
    for group in groups_to_update:
        session.execute(
            group_table.update().where(group_table.c.id == group.id).values(join_code=generate_join_code())
        )
    session.commit()

    # 4. Now that all rows have a value, alter the column to be NOT NULL.
    op.alter_column('group', 'join_code', existing_type=sa.String(length=8), nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('group', schema=None) as batch_op:
        batch_op.drop_column('join_code')
    # ### end Alembic commands ###